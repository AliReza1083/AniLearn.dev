import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import fs from "fs";
import path from "path";
import matter from "gray-matter";
import Link from "next/link";
import { serialize } from "next-mdx-remote/serialize";
import { MDXRemote } from "next-mdx-remote";
import rehypeHighlight from "rehype-highlight";

import "highlight.js/styles/atom-one-dark.css";

import Container from "@/components/Container";
import { cssPathFiles, cssFileNames } from "@/utils/mdxFies";
import { AiOutlineMenu } from "react-icons/ai";

import Heading from "@/components/blog-styles/Heading";
import Heading2 from "@/components/blog-styles/Heading2";
import Text from "@/components/blog-styles/Text";
import List from "@/components/blog-styles/List";
import BlockQuote from "@/components/blog-styles/BlockQuote";
import Anchor from "@/components/blog-styles/Anchor";

type Props = {
  data: {
    frontmatter: {
      title: string;
      author: string;
      category: string[];
      order: number;
    };
    slug: string;
  }[];
  mdxSource: any;
};

const components = {
  h1: (props: any) => <Heading {...props}></Heading>,
  h2: (props: any) => <Heading2 {...props}></Heading2>,
  p: (props: any) => <Text {...props}></Text>,
  ul: (props: any) => <List {...props}></List>,
  blockquote: (props: any) => <BlockQuote {...props}></BlockQuote>,
  a: (props: any) => <Anchor {...props}></Anchor>,
};

export default function Slug({ data, mdxSource }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const router = useRouter();
  const { slug } = router.query;

  const sortingArray = data.sort((a, b) => {
    return a.frontmatter.order - b.frontmatter.order;
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <Container className="flex items-start gap-8 px-4 mt-24 md:px-8">
        <nav
          className={`fixed bg-white md:bg-transparent md:sticky top-0 md:top-24 left-0 h-screen md:h-auto z-50  duration-200`}
        >
          <div className="w-64 px-4 mt-4">
            <h1 className="font-medium">CSS</h1>
            {sortingArray.map((d) => (
              <Link
                key={d.frontmatter.title}
                href={`${d.slug.replace(".mdx", "")}`}
              >
                <p
                  className={`px-4 py-1 mt-2 border-l-2 hover:border-primary capitalize`}
                >
                  {d.slug.replace(".mdx", "").replaceAll("-", " ")}
                </p>
              </Link>
            ))}
          </div>
        </nav>

        <div
          className={`md:hidden bg-black text-white p-3 rounded-full fixed bottom-4 left-4 ${
            isOpen && "translate-x-64"
          } duration-200 z-50`}
          onClick={() => setIsOpen(!isOpen)}
        >
          <AiOutlineMenu />
        </div>

        <div className="w-full pb-24" id="content">
          <MDXRemote {...mdxSource} components={components}></MDXRemote>
        </div>
      </Container>
    </>
  );
}

export const getStaticProps = async ({ params }: any) => {
  const posts = cssFileNames.map((slug: any) => {
    const content = fs.readFileSync(path.join(cssPathFiles, slug));
    const { data } = matter(content);
    return {
      frontmatter: data,
      slug,
    };
  });

  const { slug } = params;
  const filePath = path.join(cssPathFiles, `${slug}.mdx`);
  const fileContent = fs.readFileSync(filePath, "utf-8");
  const { data: frontmatter, content } = matter(fileContent);
  const mdxSource = await serialize(content, {
    mdxOptions: {
      rehypePlugins: [rehypeHighlight],
    },
  });

  return {
    props: {
      data: posts,
      mdxSource,
      frontmatter: JSON.parse(JSON.stringify(frontmatter)),
      slug,
    },
  };
};

export async function getStaticPaths() {
  const postsPath = cssFileNames.map((slug: any) => {
    return {
      params: {
        slug: slug.replace(/\.mdx?$/, ""),
      },
    };
  });
  return {
    paths: postsPath,
    fallback: false,
  };
}
